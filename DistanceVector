#!/usr/bin/env python3
from typing import Dict, Tuple, List


class Graph:
    def __init__(self):
        # mapping nodes to distance vector table
        # item is a dict mapping (destination, next hop): distance
        self.D:Dict[str, Dict[Tuple[str, str], int]] = {}
        self.edges:Dict[Tuple[str, str], int] = {}
        return
    
    def get_nodes(self) -> List[str]:
        # Returns the name of the router in the network, in alphabetical order
        nodes = self.D.keys()
        nodes = list(sorted(nodes))
        return nodes
    
    def add_node(self, name:str) -> None:
        # Add router if not exist
        if name not in self.D:
            self.D[name] = {}
        return
    
    def add_edge(self, a:str, b:str, cost:int) -> None:
        # add router if not exist
        self.add_node(a)
        self.add_node(b)
        
        # create a key
        if a > b:
            a, b = b, a
        edge = (a, b)
        
        # remove edge if cost == -1
        if cost == -1:
            if edge in self.edges:
                self.edges.pop(edge)
        else:
            self.edges[edge] = cost
        return
    
    def __init_dv(self):
        # D_x(y) = c(x, y)
        for (x, y), cost in self.edges.items():
            self.D[x][(y, y)] = cost
            self.D[y][(x, x)] = cost
        return
    
    
    def __dv_algorithm(self, Dx, Dy, next_hop):
        # update the next hop of y's rotuer table
        Dy_new = {(dest, next_hop): cost for (dest, _), cost in Dy}
        
        # merge the two distance table
        for key in Dy_new:
            if key not in Dx or Dx[key] > Dy[key]:
                Dx[key] = Dy[key]
        return
    
    def __update_dv(self):
        for (x, y), cost in self.edges.items():
            D_x = self.D[x]
            D_y = self.D[y]
        
        # merge
        
    
    def update(self):
        while True:
            self.__init_dv()
            self.__update_dv()
            
    
    def print_route_table(self):
        pass
    
    def print_distance_table(self):
        pass


if __name__ == '__main__':
    g = Graph()
    # Read start section
    while True:
        line = input().strip()
        if line == 'START':
            break
        g.add_node(line)
    
    # Read UPDATE section
    while True:
        line = input().strip()
        if line == 'UPDATE':
            g.update()
            break
        a, b, cost = line.split()
        g.add_edge(a, b, int(cost))
    
    # Read END section
    UPDATE_is_empty = True
    while True:
        line = input().strip()
        if line == 'END':
            # check if UPDATE section is empty
            if not UPDATE_is_empty:
                g.update()
            break
        a, b, cost = line.split()
        g.add_edge(a, b, int(cost))
        UPDATE_is_empty = False
        
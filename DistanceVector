#!/usr/bin/env python3
from typing import Dict, Tuple, List
from copy import deepcopy

class Graph:
    def __init__(self):
        # mapping nodes to distance vector table
        # item is a dict mapping (destination, next hop): distance
        self.D:Dict[str, Dict[Tuple[str, str], int]] = {}
        self.edges:Dict[Tuple[str, str], int] = {}
        self.t = 0
        return
    
    def get_nodes(self) -> List[str]:
        # Returns the name of the router in the network, in alphabetical order
        nodes = self.D.keys()
        nodes = list(sorted(nodes))
        return nodes
    
    def add_node(self, name:str) -> None:
        # Add router if not exist
        if name not in self.D:
            self.D[name] = {}
        return
    
    def add_edge(self, a:str, b:str, cost:int) -> None:
        # add router if not exist
        self.add_node(a)
        self.add_node(b)
        
        # create a key
        if a > b:
            a, b = b, a
        edge = (a, b)
        
        # remove edge if cost == -1
        if cost == -1:
            if edge in self.edges:
                self.edges.pop(edge)
        else:
            self.edges[edge] = cost
        return
    
    def __init_dv(self):
        for k in self.D:
            self.D[k].clear()
            
        # D_x(y) = c(x, y)
        for (x, y), cost in self.edges.items():
            self.D[x][(y, y)] = cost
            self.D[y][(x, x)] = cost
        return
    
    
    def __dv_algorithm(self, Dx, Dy, y:str, cost:int, x):
        # update the next hop of y's rotuer table
        # Dx(dest) = min(Dx(dest), Dx(y) + Dy(dest))
        Dy_new = {}
        for (dest, next_hop), cost1 in Dy.items():
            if next_hop != x:
                Dy_new[(dest, y)] = cost + cost1
        
        # merge the two distance table
        for key in Dy_new:
            if key not in Dx or Dx[key] > Dy_new[key]:
                Dx[key] = Dy_new[key]
        return
    
    def __update_dv(self, D_prev) -> bool:
        # Return True if have update
        # D_prev is the distance table from time step t-1
        for (x, y), cost in self.edges.items():
            # update Dx distance table inplace with Dy's distance table inplace
            self.__dv_algorithm(Dx=self.D[x], Dy=D_prev[y], y=y, cost=cost, x=x)
            self.__dv_algorithm(Dx=self.D[y], Dy=D_prev[x], y=x, cost=cost, x=y)
        return D_prev != self.D

    def update(self):
        while True:
            D_prev = deepcopy(self.D)
            # Putting init_dv here ensures that when deleting an edge, 
            # the corresponding distance information can be deleted.
            self.__init_dv()
            
            # if distance table updated, print distance talbe and continue
            if self.__update_dv(D_prev):
                self.print_distance_table()
                continue
            
            # no update, break the loop
            break
        self.print_route_table()
        return
    
    def print_route_table(self):
        for r in self.get_nodes():
            print(f'Routing Table of router {r}:')
            print()
        return
    
    
    def __print_distance_talbe_of_x(self, x:str, routers:List[str]):
        # Print distance table according to the given format
        routers.remove(x)
        print('', *routers, sep='\t')
        Dx = self.D[x]
        for dest in routers:
            row = [dest] + [Dx.get((dest, next_hop), 'INF') for next_hop in routers]
            print(*row, sep='\t')
        print()
        return
            
    
    def print_distance_table(self):
        # Prints the distance table of each router in alphabetical order
        for x in self.get_nodes():
            print(f'Distance Table of router {x} at t={self.t}:')
            self.__print_distance_talbe_of_x(x, self.get_nodes())
        self.t += 1
        return


if __name__ == '__main__':
    g = Graph()
    # Read start section
    while True:
        line = input().strip()
        if line == 'START':
            break
        g.add_node(line)
    
    # Read UPDATE section
    while True:
        line = input().strip()
        if line == 'UPDATE':
            g.update()
            break
        a, b, cost = line.split()
        g.add_edge(a, b, int(cost))
    
    # Read END section
    UPDATE_is_empty = True
    while True:
        line = input().strip()
        if line == 'END':
            # check if UPDATE section is empty
            if not UPDATE_is_empty:
                g.update()
            break
        a, b, cost = line.split()
        g.add_edge(a, b, int(cost))
        UPDATE_is_empty = False
        